import type { OpenAI } from "openai";
import type { EmbeddingCreateParams } from "openai/resources/embeddings";

import { Embeddings, type CreateEmbeddingsParams, type Embedding } from ".";

/**
 * A type that omits specific properties from EmbeddingCreateParams
 * to allow for partial customization when creating embeddings.
 *
 * This type excludes the `input` property and any properties already defined in `CreateEmbeddingsParams`.
 *
 * @type _OpenAICreateEmbeddingsParams
 * @typeParam _OpenAICreateEmbeddingsParams - Partial `EmbeddingCreateParams` excluding "input" and any properties defined in `CreateEmbeddingsParams`.
 */
type _OpenAICreateEmbeddingsParams = Omit<Partial<EmbeddingCreateParams>, "input" | keyof CreateEmbeddingsParams>;

/**
 * Represents the possible models that can be used with OpenAI embeddings.
 *
 * @type OpenAIEmbeddingModel - The model name from `EmbeddingCreateParams`.
 */
export type OpenAIEmbeddingModel = EmbeddingCreateParams["model"];

/**
 * Parameters for creating embeddings with OpenAI, extending the base `CreateEmbeddingsParams`
 * with additional OpenAI-specific options.
 *
 * @interface OpenAICreateEmbeddingsParams
 * @extends CreateEmbeddingsParams - Inherits the base parameters for embedding creation.
 * @property {OpenAIEmbeddingModel} [model] - The OpenAI model to use for creating embeddings. Defaults to a model if not provided.
 */
export interface OpenAICreateEmbeddingsParams extends CreateEmbeddingsParams, _OpenAICreateEmbeddingsParams {
  model?: OpenAIEmbeddingModel;
}

/**
 * A class that implements the `Embeddings` interface using OpenAI's API.
 * This class allows for the creation of embeddings via OpenAI's models.
 *
 * @class OpenAIEmbeddings
 * @extends Embeddings - Inherits the abstract class for embedding generation.
 *
 * @param {OpenAI} _openai - An instance of the OpenAI API client.
 */
export class OpenAIEmbeddings extends Embeddings {
  constructor(private _openai: OpenAI) {
    super();
  }

  /**
   * Returns a list of supported OpenAI models that can be used to generate embeddings.
   *
   * @returns {OpenAIEmbeddingModel[]} - An array of model names supported by OpenAI.
   */
  getModels(): OpenAIEmbeddingModel[] {
    // TODO: Replace with dynamic values
    return ["text-embedding-3-small", "text-embedding-3-large", "text-embedding-ada-002"];
  }

  /**
   * Creates embeddings using the specified input and OpenAI model.
   * The input can be a single string or an array of strings.
   *
   * @param {string | string[]} input - The input text or array of texts to generate embeddings for.
   * @param {OpenAICreateEmbeddingsParams} [params] - Optional parameters, including the OpenAI model to use.
   * @returns {Promise<Embedding[]>} - A promise that resolves to an array of embedding vectors generated by OpenAI.
   *
   * @throws {Error} - Throws an error if the OpenAI API call fails.
   */
  async create(input: string | string[], params?: OpenAICreateEmbeddingsParams): Promise<Embedding[]> {
    const _input = Array.isArray(input) ? input : [input];
    const response = await this._openai.embeddings.create({ model: "text-embedding-3-small", ...params, input: _input });
    return response.data.map((data) => data.embedding);
  }
}
